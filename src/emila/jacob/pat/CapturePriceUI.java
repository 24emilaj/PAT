/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emila.jacob.pat;

//import static com.sun.org.apache.xalan.internal.lib.ExsltDatetime.date;
import java.awt.Color;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author 24emilaj
 */
public class CapturePriceUI extends javax.swing.JFrame {

    private DataHandler dh = new DataHandler();

    /**
     * Creates new form CapturePriceUI
     */
    public CapturePriceUI() {
        initComponents();
        this.insertDropDown();
        // ad a view pricelist option and then be able to delete or update prices based on dates
        this.toolTips();
    }
/**
 * method which sets all the tooltip texts for buttons/textfields on the jframe
 */
    public void toolTips() {
        //sets tooltp text for the set price button
        btnSetPrice.setToolTipText("Click this button to insert the new price into the database");
        //sets tooltp text for the price list button
        btnPriceList.setToolTipText("Click this button to view the list of all prices");
        //sets tooltp text for the back button
        btnBack.setToolTipText("Click this button to return to the menu");
        //sets tooltp text for the drop down menu
        dropDown.setToolTipText("select a packaging type");
        //sets tooltp text for the input price textfield
        txtInputPrice.setToolTipText("enter the new price here");
        

    }

    public void insertDropDown() {
        String out = "";
        ArrayList<TrayTypes> trayTypes = dh.getAlltrayTypes();
        for (int i = 0; i < trayTypes.size(); i++) {
            out = trayTypes.get(i).getType();
            // dropDown.add(out);
            dropDown.addItem(out);
        }

    }

    public double doubleNewPrice() {
        String sPrice = txtInputPrice.getText();
        double newPrice = 0;
        boolean dbl;
        try {
            newPrice = Double.parseDouble(sPrice);
            dbl = true;
        } catch (Exception e) {
            dbl = false;
        }

        if (dbl) {
            newPrice = Double.parseDouble(sPrice);
        } else {
            JOptionPane.showMessageDialog(null, "enter a valid price");
            txtInputPrice.setBackground(Color.red);
        }
        return newPrice;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtInputPrice = new javax.swing.JTextField();
        btnSetPrice = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        datePickerStart = new com.github.lgooddatepicker.components.DatePicker();
        datePickerStop = new com.github.lgooddatepicker.components.DatePicker();
        jLabel5 = new javax.swing.JLabel();
        dropDown = new javax.swing.JComboBox<>();
        btnPriceList = new javax.swing.JButton();

        jTextField2.setText("jTextField2");

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Capture Price");
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel2.setText("Select date from which to start implementing price");

        jLabel3.setText("Select date from which to stop implementing price");

        jLabel4.setText("Input price");

        txtInputPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputPriceActionPerformed(evt);
            }
        });

        btnSetPrice.setText("Set Price");
        btnSetPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetPriceActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel5.setText("Packaging type");

        dropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT" }));
        dropDown.setToolTipText("");
        dropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDownActionPerformed(evt);
            }
        });

        btnPriceList.setText("Price List");
        btnPriceList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(datePickerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(292, 292, 292)
                                        .addComponent(btnSetPrice))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(25, 25, 25)
                                        .addComponent(datePickerStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel4))
                                        .addGap(54, 54, 54)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dropDown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtInputPrice))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(157, 157, 157)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnPriceList)
                                .addGap(15, 15, 15)))
                        .addGap(0, 5, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnPriceList)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtInputPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(datePickerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(datePickerStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(btnSetPrice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSetPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetPriceActionPerformed
        //checks for validity
        //trycatch?
        try {
            ArrayList<Price> prices = dh.getAllPrices();
            String sPrice = txtInputPrice.getText();
            //double newPrice = Double.parseDouble(txtInputPrice.getText());
            double newPrice = this.doubleNewPrice();

//            if (sPrice.equalsIgnoreCase("" + Double.parseDouble(sPrice))) {
//                newPrice = Double.parseDouble(txtInputPrice.getText());
//                txtInputPrice.setBackground(Color.white);
//            } else {
//                JOptionPane.showMessageDialog(null, "enter a valid price");
//                txtInputPrice.setBackground(Color.red);
//            }
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            String sDate = "" + datePickerStart.getDate();
            LocalDate date = LocalDate.parse(sDate, dtf);
//        System.out.println(datePickerStart.getDate() + "");
            String trayType = "" + dropDown.getSelectedItem();
            int id = 0;
            ArrayList<TrayTypes> trayTypes = dh.getAlltrayTypes();
            for (int i = 0; i < trayTypes.size(); i++) {
                if (trayType.equalsIgnoreCase(trayTypes.get(i).getType())) {
                    int pos = i;
                    id = trayTypes.get(pos).getTrayTypeID();
                }

            }
//            try {
//                newPrice = (double) newPrice;
//                // JOptionPane.showMessageDialog(null, "enter a valid price");
//            } catch (NumberFormatException e) {
//                JOptionPane.showMessageDialog(null, "enter a valid price");
//                txtInputPrice.setBackground(Color.red);
//            }
//            if (!(newPrice == (double) newPrice)) {
//                JOptionPane.showMessageDialog(null, "enter a valid price");
//                txtInputPrice.setBackground(Color.red);
//            }

            if ((!(date.isAfter(datePickerStop.getDate()))) && !("" + dropDown.getSelectedItem()).equalsIgnoreCase("select")) {
//                System.out.println(Double.parseDouble(sPrice));
//                System.out.println(sPrice);
//                System.out.println(newPrice);
                if (newPrice == Double.parseDouble(sPrice)) {
                    newPrice = Double.parseDouble(sPrice);
                    txtInputPrice.setBackground(Color.white);
                    Price p = new Price(id, date, newPrice);
                    dh.insertNewPrice(p);
                    JOptionPane.showMessageDialog(null, "Price successfully Inputted");
                } else {
                    JOptionPane.showMessageDialog(null, "enter a valid price");
                    txtInputPrice.setBackground(Color.red);
                }
//                try {
//                    newPrice = Double.parseDouble(sPrice);
//                    txtInputPrice.setBackground(Color.white);
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(null, "enter a valid price");
//                    txtInputPrice.setBackground(Color.red);
//                }

            } else {
                if (("" + dropDown.getSelectedItem()).equalsIgnoreCase("select")) {
                    JOptionPane.showMessageDialog(null, "please select a packaging type");
                } else {
                    JOptionPane.showMessageDialog(null, "Please input a valid start date which isn't after the end date");
                }
            }
        } catch (Exception e) {
            System.err.println(e);
        }

        //prices.size()+1

    }//GEN-LAST:event_btnSetPriceActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        MenuUI m = new MenuUI();
        m.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtInputPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInputPriceActionPerformed

    private void dropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dropDownActionPerformed

    private void btnPriceListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceListActionPerformed
        PricelistUI pl = new PricelistUI();
        pl.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnPriceListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CapturePriceUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CapturePriceUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CapturePriceUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CapturePriceUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CapturePriceUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnPriceList;
    private javax.swing.JButton btnSetPrice;
    private com.github.lgooddatepicker.components.DatePicker datePickerStart;
    private com.github.lgooddatepicker.components.DatePicker datePickerStop;
    private javax.swing.JComboBox<String> dropDown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField txtInputPrice;
    // End of variables declaration//GEN-END:variables
}
